# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'CDM_Monitoring_UI.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys, os, random
from PyQt5 import QtCore, QtGui, QtWidgets, uic
from PyQt5.QtWidgets import QBoxLayout, QApplication, QMainWindow, QWidget, QPushButton, QTextEdit, QDialog
from PyQt5.QtWidgets import QLineEdit, QLabel, QVBoxLayout, QHBoxLayout, QSizePolicy, QGroupBox, QMessageBox, QWidget, \
    QPushButton
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from PyQt5.QtGui import QIcon

import numpy as np
import pyqtgraph as pg
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure
import matplotlib.pyplot as plt
import matplotlib
from random import randint
from time import sleep

########## added
import time
import datetime
from QLed import QLed

##### Signature-based Monitoring #####
Vulnerability, Manual, = list(), list()
weak_state = list()
manual_state = list()

##### Rule-based Monitoring (ATLAS) #####
ATLAS_R1_state, ATLAS_R2_state, ATLAS_R3_state, ATLAS_R4_state = list(), list(), list(), list()
##### Rule-based Monitoring (MS-SQL) #####
MSSQL_R5_state, MSSQL_R6_state, MSSQL_R7_state, MSSQL_R8_state = list(), list(), list(), list()


cnt = 1
y_before_idx = 0
update_length = 1
init_length = 10
g_c = 0
fr = None
sleeping_time = 0.5
before_almsg_idx = 0
before_state = ''
line_cnt = 0


### 해당되는 상태 LED 이미지 불러오기
class ReadResults(QThread):
    tic2 = pyqtSignal(name="patch_level1")
    tic3 = pyqtSignal(name="patch_level2")
    tic4 = pyqtSignal(name="patch_level3")
    tic5 = pyqtSignal(name="patch_level4")
    tic6 = pyqtSignal(name="patch_level5")
    tic7 = pyqtSignal(name="log_level1")
    tic8 = pyqtSignal(name="log_level2")
    tic9 = pyqtSignal(name="log_level3")
    tic10 = pyqtSignal(name="log_level4")
    tic11 = pyqtSignal(name="log_level5")
    tic12 = pyqtSignal(name="account_level1")
    tic13 = pyqtSignal(name="account_level2")
    tic14 = pyqtSignal(name="account_level3")
    tic15 = pyqtSignal(name="account_level4")
    tic16 = pyqtSignal(name="account_level5")
    tic17 = pyqtSignal(name="service_level1")
    tic18 = pyqtSignal(name="service_level2")
    tic19 = pyqtSignal(name="service_level3")
    tic20 = pyqtSignal(name="service_level4")
    tic21 = pyqtSignal(name="service_level5")
    tic22 = pyqtSignal(name="security_level1")
    tic23 = pyqtSignal(name="security_level2")
    tic24 = pyqtSignal(name="security_level3")
    tic25 = pyqtSignal(name="security_level4")
    tic26 = pyqtSignal(name="security_level5")
    
    ### 보안점검항목 중 weak 결과와 수동점검결과가 나온 항목에 대해서 다시 알람을 해줌
    tic27 = pyqtSignal(name="weak")
    tic28 = pyqtSignal(name="hand")
    ### ATLAS와 MSSQL을 통해 CDM 접근 시 저장되는 로그기반의 보안 분석
    tic29 = pyqtSignal(name="ATLAS_R1")
    tic30 = pyqtSignal(name="ATLAS_R2")
    tic31 = pyqtSignal(name="ATLAS_R3")
    tic32 = pyqtSignal(name="ATLAS_R4")
    tic33 = pyqtSignal(name="MSSQL_R5")
    tic34 = pyqtSignal(name="MSSQL_R6")
    tic35 = pyqtSignal(name="MSSQL_R7")
    tic36 = pyqtSignal(name="MSSQL_R8")

    def __init__(self):
        QThread.__init__(self)

    def __del__(self):
        self.wait()

    def run(self):
        global weak_state
        global manual_state
        global ATLAS_R1_state
        global ATLAS_R2_state
        global ATLAS_R3_state
        global ATLAS_R4_state
        global MSSQL_R5_state
        global MSSQL_R6_state
        global MSSQL_R7_state
        global MSSQL_R8_state

        weak = pyqtSignal(str)
        hand = pyqtSignal(str)

        ATLAS_R1 = pyqtSignal(str)
        ATLAS_R2 = pyqtSignal(str)
        ATLAS_R3 = pyqtSignal(str)
        ATLAS_R4 = pyqtSignal(str)
        MSSQL_R5 = pyqtSignal(str)
        MSSQL_R6 = pyqtSignal(str)
        MSSQL_R7 = pyqtSignal(str)
        MSSQL_R8 = pyqtSignal(str)

        f = open("RegistryResult.txt", 'r')
        f_weak = open("weakness.txt", 'r')
        f_hand = open("handwork.txt", 'r')
        f_ATLAS = open("Login_ATLAS.txt", 'r')
        f_MSSQL = open("Login_MSSQL.txt", 'r')


        ### Harzard situation 시각화
        while True:
            line = f.readline().replace('\n', '')
            if not line:
                break

            dump = line.split(',')
            state1 = dump[0]
            state2 = dump[-1]

            ## 공격이 탐지된 위치에 Red LED 아이콘 출력
            if state1 == "account":
                if state2 == 'insignificant':
                    self.account_level1.emit()
                elif state2 == 'minor':
                    self.account_level2.emit()
                elif state2 == 'moderate':
                    self.account_level3.emit()
                elif state2 == 'major':
                    self.account_level4.emit()
                elif state2 == 'catastrophic':
                    self.account_level5.emit()

            elif state1 == "log":
                if state2 == 'insignificant':
                    self.log_level1.emit()
                elif state2 == 'minor':
                    self.log_level2.emit()
                elif state2 == 'moderate':
                    self.log_level3.emit()
                elif state2 == 'major':
                    self.log_level4.emit()
                elif state2 == 'catastrophic':
                    self.log_level5.emit()

            elif state1 == "patch":
                if state2 == 'insignificant':
                    self.patch_level1.emit()
                elif state2 == 'minor':
                    self.patch_level2.emit()
                elif state2 == 'moderate':
                    self.patch_level3.emit()
                elif state2 == 'major':
                    self.patch_level4.emit()
                elif state2 == 'catastrophic':
                    self.patch_level5.emit()

            elif state1 == "security":
                if state2 == 'insignificant':
                    self.security_level1.emit()
                elif state2 == 'minor':
                    self.security_level2.emit()
                elif state2 == 'moderate':
                    self.security_level3.emit()
                elif state2 == 'major':
                    self.security_level4.emit()
                elif state2 == 'catastrophic':
                    self.security_level5.emit()

            elif state1 == "service":
                if state2 == 'insignificant':
                    self.service_level1.emit()
                elif state2 == 'minor':
                    self.service_level2.emit()
                elif state2 == 'moderate':
                    self.service_level3.emit()
                elif state2 == 'major':
                    self.service_level4.emit()
                elif state2 == 'catastrophic':
                    self.service_level5.emit()
        f.close()

        ### 보안점검항목 중 weak 결과와 수동점검결과
        while True:
            line1 = f_weak.readline().replace('\n', '')
            if not line1:
                break
            weak_state.append(line1)
        self.weak.emit()
        f_weak.close()

        while True:
            line2 = f_hand.readline().replace('\n', '')
            if not line2:
                break
            manual_state.append(line2)
        self.hand.emit()
        f_hand.close()

        ### 보안점검항목 ATLAS 로그에 대한 Rule 결과
        while True:
            line3 = f_ATLAS.readline().replace('\n', '')
            if not line3:
                break
            dump = line3.split(',')

            if dump[0] == "Rule1":
                if len(dump) == 1:
                    continue
                else:
                    for i in range(1, len(dump)):
                        ATLAS_R1_state.append(dump[i])
                # self.ATLAS_R1.emit()
            elif dump[0] == "Rule2":
                if len(dump) == 1:
                    continue
                else:
                    for i in range(1,len(dump)):
                        ATLAS_R2_state.append(dump[i])
                # self.ATLAS_R2.emit()
            elif dump[0] == "Rule3":
                if len(dump) == 1:
                    continue
                else:
                    for i in range(1, len(dump)):
                        ATLAS_R3_state.append(dump[i])
                # self.ATLAS_R3.emit()
            elif dump[0] == "Rule4":
                if len(dump) == 1:
                    continue
                else:
                    for i in range(1, len(dump)):
                        ATLAS_R4_state.append(dump[i])
                # self.ATLAS_R4.emit()
        self.ATLAS_R1.emit()
        self.ATLAS_R2.emit()
        self.ATLAS_R3.emit()
        self.ATLAS_R4.emit()
        f_ATLAS.close()


        ### 보안점검항목 MSSQL 로그에 대한 Rule 결과
        while True:
            line4 = f_MSSQL.readline().replace('\n', '')
            if not line4:
                break
            dump = line4.split(',')

            if dump[0] == "Rule5":
                if len(dump) == 1:
                    continue
                else:
                    for i in range(1, len(dump)):
                        MSSQL_R5_state.append(dump[i])
            elif dump[0] == "Rule6":
                if len(dump) == 1:
                    continue
                else:
                    for i in range(1,len(dump)):
                        MSSQL_R6_state.append(dump[i])
            elif dump[0] == "Rule7":
                if len(dump) == 1:
                    continue
                else:
                    for i in range(0, len(dump)-1):
                        MSSQL_R7_state.append(dump[i+1])
            elif dump[0] == "Rule8":
                if len(dump) == 1:
                    continue
                else:
                    for i in range(1, len(dump)):
                        MSSQL_R8_state.append(dump[i])
        self.MSSQL_R5.emit()
        self.MSSQL_R6.emit()
        self.MSSQL_R7.emit()
        self.MSSQL_R8.emit()
        f_MSSQL.close()


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setEnabled(True)
        MainWindow.resize(893, 669)

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        ########################################################
        ### [1] Background Image & QPushButton (Start & Quit)
        ########################################################
        self.Background = QtWidgets.QLabel(self.centralwidget)
        self.Background.setGeometry(QtCore.QRect(20, 80, 851, 541))
        self.Background.setStyleSheet("image: url(:/Final/Fig1_Background.png);")
        self.Background.setText("")
        self.Background.setWordWrap(False)
        self.Background.setOpenExternalLinks(False)
        self.Background.setObjectName("Background")

        # self.Quit = QtWidgets.QPushButton(self.centralwidget)
        # self.Quit.setGeometry(QtCore.QRect(20, 30, 101, 41))
        # font = QtGui.QFont()
        # font.setPointSize(11)
        # font.setBold(True)
        # font.setWeight(75)
        # self.Quit.setFont(font)
        # self.Quit.setObjectName("Quit")


        ################################################################
        ### [2] Signature-based Monitoring (Vulnerability & Manual)
        ################################################################
        ## setGeometry (창의 위치를 모니터 좌상단으로부터 가로, 세로로 설정) (창의 크기를 가로, 세로로 설정)
        self.Vulnerability_Alert = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(5)
        font.setWeight(75)
        self.Vulnerability_Alert.setFont(font)
        self.Vulnerability_Alert.setObjectName("Vulnerability_Alert")
        self.QTextEdit_weak = QTextEdit(self.centralwidget)
        self.QTextEdit_weak.setGeometry(QtCore.QRect(587, 393, 276, 108)) # 바깥크기, 587, 393, 276, 108
        self.te1 = QTextEdit()

        self.Manual_Alert = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(5)
        font.setWeight(75)
        self.Manual_Alert.setFont(font)
        self.Manual_Alert.setObjectName("Manual_Alert")
        self.QTextEdit_manual = QTextEdit(self.centralwidget)
        self.QTextEdit_manual.setGeometry(QtCore.QRect(587, 500, 276, 108)) # 바깥크기
        self.te2 = QTextEdit()

        ################################################################
        ### [3] Rule-based Monitoring (ALTAS & MSSQL)
        ################################################################
        self.Rule1_Alert = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(5)
        font.setWeight(75)
        self.Rule1_Alert.setFont(font)
        self.Rule1_Alert.setObjectName("Rule1_Alert")
        self.QTextEdit_Rule1 = QTextEdit(self.centralwidget)
        self.QTextEdit_Rule1.setGeometry(QtCore.QRect(123, 120, 279, 49)) # 바깥크기
        self.te3 = QTextEdit()

        self.Rule2_Alert = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(5)
        font.setWeight(75)
        self.Rule2_Alert.setFont(font)
        self.Rule2_Alert.setObjectName("Rule2_Alert")
        self.QTextEdit_Rule2 = QTextEdit(self.centralwidget)
        self.QTextEdit_Rule2.setGeometry(QtCore.QRect(123, 176, 279, 49)) # 바깥크기
        self.te4 = QTextEdit()

        self.Rule3_Alert = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(5)
        font.setWeight(75)
        self.Rule3_Alert.setFont(font)
        self.Rule3_Alert.setObjectName("Rule3_Alert")
        self.QTextEdit_Rule3 = QTextEdit(self.centralwidget)
        self.QTextEdit_Rule3.setGeometry(QtCore.QRect(123, 233, 279, 49)) # 바깥크기
        self.te5 = QTextEdit()

        self.Rule4_Alert = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(5)
        font.setWeight(75)
        self.Rule4_Alert.setFont(font)
        self.Rule4_Alert.setObjectName("Rule4_Alert")
        self.QTextEdit_Rule4 = QTextEdit(self.centralwidget)
        self.QTextEdit_Rule4.setGeometry(QtCore.QRect(123, 289, 279, 49)) # 바깥크기
        self.te6 = QTextEdit()

        self.Rule5_Alert = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(5)
        font.setWeight(75)
        self.Rule5_Alert.setFont(font)
        self.Rule5_Alert.setObjectName("Rule5_Alert")
        self.QTextEdit_Rule5 = QTextEdit(self.centralwidget)
        self.QTextEdit_Rule5.setGeometry(QtCore.QRect(123, 392, 279, 49)) # 바깥크기
        self.te7 = QTextEdit()

        self.Rule6_Alert = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(5)
        font.setWeight(75)
        self.Rule6_Alert.setFont(font)
        self.Rule6_Alert.setObjectName("Rule6_Alert")
        self.QTextEdit_Rule6 = QTextEdit(self.centralwidget)
        self.QTextEdit_Rule6.setGeometry(QtCore.QRect(123, 448, 279, 49)) # 바깥크기
        self.te8 = QTextEdit()

        self.Rule7_Alert = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(5)
        font.setWeight(75)
        self.Rule7_Alert.setFont(font)
        self.Rule7_Alert.setObjectName("Rule7_Alert")
        self.QTextEdit_Rule7 = QTextEdit(self.centralwidget)
        self.QTextEdit_Rule7.setGeometry(QtCore.QRect(123, 504, 279, 49)) # 바깥크기
        self.te9 = QTextEdit()

        self.Rule8_Alert = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(5)
        font.setWeight(75)
        self.Rule8_Alert.setFont(font)
        self.Rule8_Alert.setObjectName("Rule8_Alert")
        self.QTextEdit_Rule8 = QTextEdit(self.centralwidget)
        self.QTextEdit_Rule8.setGeometry(QtCore.QRect(123, 561, 279, 49)) # 바깥크기
        self.te10 = QTextEdit()


        ### 해당되는 상태 LED 이미지 불러오기
        self.Results = ReadResults()  ## 함수 내에서 결과 파일을 읽어오고, attack 인지 확인
        self.LED_Alert_widget()
        ### 위험관리 점검항목 중 Weakness & 수동점검 (handwork)  파일 불러오기
        self.Vulnerability_Alert_widget()
        self.Manual_Alert_widget()

        ### ATLAS & MSSQL 파일 불러오기
        self.ATLAS_Rule1_Alert_widget()
        self.ATLAS_Rule2_Alert_widget()
        self.ATLAS_Rule3_Alert_widget()
        self.ATLAS_Rule4_Alert_widget()
        self.MSSQL_Rule5_Alert_widget()
        self.MSSQL_Rule6_Alert_widget()
        self.MSSQL_Rule7_Alert_widget()
        self.MSSQL_Rule8_Alert_widget()

        ### Class 호출
        self.Results.start()

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 893, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def LED_Alert_widget(self):
        ################################################################
        ### [3-1 Patch] Signature-based Monitoring (Visualization)
        ################################################################
        self.Catastrophic = QtWidgets.QLabel(self.centralwidget)
        self.Catastrophic.setGeometry(QtCore.QRect(800, 125, 61, 41))
        self.Catastrophic.setText("")
        self.Catastrophic.setObjectName("Catastrophic")
        self.Moderate = QtWidgets.QLabel(self.centralwidget)
        self.Moderate.setGeometry(QtCore.QRect(695, 125, 61, 41))
        self.Moderate.setText("")
        self.Moderate.setObjectName("Moderate")
        self.Minor = QtWidgets.QLabel(self.centralwidget)
        self.Minor.setGeometry(QtCore.QRect(642, 125, 61, 41))
        self.Minor.setText("")
        self.Minor.setObjectName("Minor")
        self.Major = QtWidgets.QLabel(self.centralwidget)
        self.Major.setGeometry(QtCore.QRect(748, 125, 61, 41))
        self.Major.setText("")
        self.Major.setObjectName("Major")
        self.Insignificant = QtWidgets.QLabel(self.centralwidget)
        self.Insignificant.setGeometry(QtCore.QRect(590, 125, 61, 41))
        self.Insignificant.setText("")
        self.Insignificant.setObjectName("Insignificant")
        ################################################################
        ### [3-2 Log] Signature-based Monitoring (Visualization)
        ################################################################
        self.Catastrophic_2 = QtWidgets.QLabel(self.centralwidget)
        self.Catastrophic_2.setGeometry(QtCore.QRect(800, 180, 61, 41))
        self.Catastrophic_2.setText("")
        self.Catastrophic_2.setObjectName("Catastrophic_2")
        self.Minor_2 = QtWidgets.QLabel(self.centralwidget)
        self.Minor_2.setGeometry(QtCore.QRect(642, 180, 61, 41))
        self.Minor_2.setText("")
        self.Minor_2.setObjectName("Minor_2")
        self.Moderate_2 = QtWidgets.QLabel(self.centralwidget)
        self.Moderate_2.setGeometry(QtCore.QRect(695, 180, 61, 41))
        self.Moderate_2.setText("")
        self.Moderate_2.setObjectName("Moderate_2")
        self.Insignificant_2 = QtWidgets.QLabel(self.centralwidget)
        self.Insignificant_2.setGeometry(QtCore.QRect(590, 180, 61, 41))
        self.Insignificant_2.setText("")
        self.Insignificant_2.setObjectName("Insignificant_2")
        self.Major_2 = QtWidgets.QLabel(self.centralwidget)
        self.Major_2.setGeometry(QtCore.QRect(748, 180, 61, 41))
        self.Major_2.setText("")
        self.Major_2.setObjectName("Major_2")
        ################################################################
        ### [3-3 Account] Signature-based Monitoring (Visualization)
        ################################################################
        self.Catastrophic_3 = QtWidgets.QLabel(self.centralwidget)
        self.Catastrophic_3.setGeometry(QtCore.QRect(800, 235, 61, 41))
        self.Catastrophic_3.setText("")
        self.Catastrophic_3.setObjectName("Catastrophic_3")
        self.Minor_3 = QtWidgets.QLabel(self.centralwidget)
        self.Minor_3.setGeometry(QtCore.QRect(642, 235, 61, 41))
        self.Minor_3.setText("")
        self.Minor_3.setObjectName("Minor_3")
        self.Moderate_3 = QtWidgets.QLabel(self.centralwidget)
        self.Moderate_3.setGeometry(QtCore.QRect(695, 235, 61, 41))
        self.Moderate_3.setText("")
        self.Moderate_3.setObjectName("Moderate_3")
        self.Insignificant_3 = QtWidgets.QLabel(self.centralwidget)
        self.Insignificant_3.setGeometry(QtCore.QRect(590, 235, 61, 41))
        self.Insignificant_3.setText("")
        self.Insignificant_3.setObjectName("Insignificant_3")
        self.Major_3 = QtWidgets.QLabel(self.centralwidget)
        self.Major_3.setGeometry(QtCore.QRect(748, 235, 61, 41))
        self.Major_3.setText("")
        self.Major_3.setObjectName("Major_3")
        ################################################################
        ### [3-4 Service] Signature-based Monitoring (Visualization)
        ################################################################
        self.Catastrophic_4 = QtWidgets.QLabel(self.centralwidget)
        self.Catastrophic_4.setGeometry(QtCore.QRect(800, 290, 61, 41))
        self.Catastrophic_4.setText("")
        self.Catastrophic_4.setObjectName("Catastrophic_4")
        self.Minor_4 = QtWidgets.QLabel(self.centralwidget)
        self.Minor_4.setGeometry(QtCore.QRect(642, 290, 61, 41))
        self.Minor_4.setText("")
        self.Minor_4.setObjectName("Minor_4")
        self.Moderate_4 = QtWidgets.QLabel(self.centralwidget)
        self.Moderate_4.setGeometry(QtCore.QRect(695, 290, 61, 41))
        self.Moderate_4.setText("")
        self.Moderate_4.setObjectName("Moderate_4")
        self.Insignificant_4 = QtWidgets.QLabel(self.centralwidget)
        self.Insignificant_4.setGeometry(QtCore.QRect(590, 290, 61, 41))
        self.Insignificant_4.setText("")
        self.Insignificant_4.setObjectName("Insignificant_4")
        self.Major_4 = QtWidgets.QLabel(self.centralwidget)
        self.Major_4.setGeometry(QtCore.QRect(748, 290, 61, 41))
        self.Major_4.setText("")
        self.Major_4.setObjectName("Major_4")
        ################################################################
        ### [3-5 Security] Signature-based Monitoring (Visualization)
        ################################################################
        self.Catastrophic_5 = QtWidgets.QLabel(self.centralwidget)
        self.Catastrophic_5.setGeometry(QtCore.QRect(800, 345, 61, 41))
        self.Catastrophic_5.setText("")
        self.Catastrophic_5.setObjectName("Catastrophic_5")
        self.Minor_5 = QtWidgets.QLabel(self.centralwidget)
        self.Minor_5.setGeometry(QtCore.QRect(642, 345, 61, 41))
        self.Minor_5.setText("")
        self.Minor_5.setObjectName("Minor_5")
        self.Moderate_5 = QtWidgets.QLabel(self.centralwidget)
        self.Moderate_5.setGeometry(QtCore.QRect(695, 345, 61, 41))
        self.Moderate_5.setText("")
        self.Moderate_5.setObjectName("Moderate_5")
        self.Insignificant_5 = QtWidgets.QLabel(self.centralwidget)
        self.Insignificant_5.setGeometry(QtCore.QRect(590, 345, 61, 41))
        self.Insignificant_5.setText("")
        self.Insignificant_5.setObjectName("Insignificant_5")
        self.Major_5 = QtWidgets.QLabel(self.centralwidget)
        self.Major_5.setGeometry(QtCore.QRect(748, 345, 61, 41))
        self.Major_5.setText("")
        self.Major_5.setObjectName("Major_5")

        # 시그널 슬롯 연결 (Alert 일 때 LED 아이콘 생성)
        self.Results.patch_level1.connect(
            lambda: self.Insignificant.setStyleSheet("image: url(:/Final/Insignificant.png);")
        )
        self.Results.patch_level2.connect(
            lambda: self.Minor.setStyleSheet("image: url(:/Final/Minor.png);")
        )
        self.Results.patch_level3.connect(
            lambda: self.Moderate.setStyleSheet("image: url(:/Final/Moderate.png);")
        )
        self.Results.patch_level4.connect(
            lambda: self.Major.setStyleSheet("image: url(:/Final/Major.png);")
        )
        self.Results.patch_level5.connect(
            lambda: self.Catastrophic.setStyleSheet("image: url(:/Final/Catastrophic.png);")
        )

        self.Results.log_level1.connect(
            lambda: self.Insignificant_2.setStyleSheet("image: url(:/Final/Insignificant.png);")
        )
        self.Results.log_level2.connect(
            lambda: self.Minor_2.setStyleSheet("image: url(:/Final/Minor.png);")
        )
        self.Results.log_level3.connect(
            lambda: self.Moderate_2.setStyleSheet("image: url(:/Final/Moderate.png);")
        )
        self.Results.log_level4.connect(
            lambda: self.Major_2.setStyleSheet("image: url(:/Final/Major.png);")
        )
        self.Results.log_level5.connect(
            lambda: self.Catastrophic_2.setStyleSheet("image: url(:/Final/Catastrophic.png);")
        )

        self.Results.account_level1.connect(
            lambda: self.Insignificant_3.setStyleSheet("image: url(:/Final/Insignificant.png);")
        )
        self.Results.account_level2.connect(
            lambda: self.Minor_3.setStyleSheet("image: url(:/Final/Minor.png);")
        )
        self.Results.account_level3.connect(
            lambda: self.Moderate_3.setStyleSheet("image: url(:/Final/Moderate.png);")
        )
        self.Results.account_level4.connect(
            lambda: self.Major_3.setStyleSheet("image: url(:/Final/Major.png);")
        )
        self.Results.account_level5.connect(
            lambda: self.Catastrophic_3.setStyleSheet("image: url(:/Final/Catastrophic.png);")
        )

        self.Results.service_level1.connect(
            lambda: self.Insignificant_4.setStyleSheet("image: url(:/Final/Insignificant.png);")
        )
        self.Results.service_level2.connect(
            lambda: self.Minor_4.setStyleSheet("image: url(:/Final/Minor.png);")
        )
        self.Results.service_level3.connect(
            lambda: self.Moderate_4.setStyleSheet("image: url(:/Final/Moderate.png);")
        )
        self.Results.service_level4.connect(
            lambda: self.Major_4.setStyleSheet("image: url(:/Final/Major.png);")
        )
        self.Results.service_level5.connect(
            lambda: self.Catastrophic_4.setStyleSheet("image: url(:/Final/Catastrophic.png);")
        )

        self.Results.security_level1.connect(
            lambda: self.Insignificant_5.setStyleSheet("image: url(:/Final/Insignificant.png);")
        )
        self.Results.security_level2.connect(
            lambda: self.Minor_5.setStyleSheet("image: url(:/Final/Minor.png);")
        )
        self.Results.security_level3.connect(
            lambda: self.Moderate_5.setStyleSheet("image: url(:/Final/Moderate.png);")
        )
        self.Results.security_level4.connect(
            lambda: self.Major_5.setStyleSheet("image: url(:/Final/Major.png);")
        )
        self.Results.security_level5.connect(
            lambda: self.Catastrophic_5.setStyleSheet("image: url(:/Final/Catastrophic.png);")
        )

    ### weakness 파일 불러와야 함
    def Vulnerability_Alert_widget(self):
        form_lbx = QBoxLayout(QBoxLayout.TopToBottom)
        self.QTextEdit_weak.setLayout(form_lbx)
        self.Results.weak.connect(lambda: self.weakness())
        form_lbx.addWidget(self.te1)

    def weakness(self):
        for i in range (0, len(weak_state)):
            self.te1.insertPlainText(str(weak_state[i]) + "\n")

    ### handwork 파일 불러와야 함
    def Manual_Alert_widget(self):
        form_lbx = QBoxLayout(QBoxLayout.TopToBottom)
        self.QTextEdit_manual.setLayout(form_lbx)
        self.Results.hand.connect(lambda: self.handwork())
        form_lbx.addWidget(self.te2)

    def handwork(self):
        for i in range (0, len(manual_state)):
            self.te2.insertPlainText(str(manual_state[i]) + "\n")

    ### ATLAS 파일 불러와야 함
    def ATLAS_Rule1_Alert_widget(self):
        form_lbx = QBoxLayout(QBoxLayout.TopToBottom)
        self.QTextEdit_Rule1.setLayout(form_lbx)
        self.Results.ATLAS_R1.connect(lambda: self.ATLAS_Rule1())
        form_lbx.addWidget(self.te3)

    def ATLAS_Rule1(self):
        self.te3.insertPlainText(str(ATLAS_R1_state).replace("[", "").replace("]", "").replace("'", "").replace(" ", "") + "\n")

    def ATLAS_Rule2_Alert_widget(self):
        form_lbx = QBoxLayout(QBoxLayout.TopToBottom)
        self.QTextEdit_Rule2.setLayout(form_lbx)
        self.Results.ATLAS_R2.connect(lambda: self.ATLAS_Rule2())
        form_lbx.addWidget(self.te4)

    def ATLAS_Rule2(self):
        self.te4.insertPlainText(str(ATLAS_R2_state).replace("[", "").replace("]", "").replace("'", "").replace(" ", "") + "\n")

    def ATLAS_Rule3_Alert_widget(self):
        form_lbx = QBoxLayout(QBoxLayout.TopToBottom)
        self.QTextEdit_Rule3.setLayout(form_lbx)
        self.Results.ATLAS_R3.connect(lambda: self.ATLAS_Rule3())
        form_lbx.addWidget(self.te5)

    def ATLAS_Rule3(self):
        self.te5.insertPlainText(str(ATLAS_R3_state).replace("[", "").replace("]", "").replace("'", "").replace(" ", "") + "\n")

    def ATLAS_Rule4_Alert_widget(self):
        form_lbx = QBoxLayout(QBoxLayout.TopToBottom)
        self.QTextEdit_Rule4.setLayout(form_lbx)
        self.Results.ATLAS_R4.connect(lambda: self.ATLAS_Rule4())
        form_lbx.addWidget(self.te6)

    def ATLAS_Rule4(self):
        self.te6.insertPlainText(str(ATLAS_R4_state).replace("[", "").replace("]", "").replace("'", "").replace(" ", "") + "\n")

    ### MSSQL 파일 불러와야 함
    def MSSQL_Rule5_Alert_widget(self):
        form_lbx = QBoxLayout(QBoxLayout.TopToBottom)
        self.QTextEdit_Rule5.setLayout(form_lbx)
        self.Results.MSSQL_R5.connect(lambda: self.MSSQL_Rule5())
        form_lbx.addWidget(self.te7)

    def MSSQL_Rule5(self):
        self.te7.insertPlainText(str(MSSQL_R5_state).replace("[", "").replace("]", "").replace("'", "").replace(" ", "") + "\n")

    def MSSQL_Rule6_Alert_widget(self):
        form_lbx = QBoxLayout(QBoxLayout.TopToBottom)
        self.QTextEdit_Rule6.setLayout(form_lbx)
        self.Results.MSSQL_R6.connect(lambda: self.MSSQL_Rule6())
        form_lbx.addWidget(self.te8)

    def MSSQL_Rule6(self):
        self.te8.insertPlainText(str(MSSQL_R6_state).replace("[", "").replace("]", "").replace("'", "").replace(" ", "") + "\n")

    def MSSQL_Rule7_Alert_widget(self):
        form_lbx = QBoxLayout(QBoxLayout.TopToBottom)
        self.QTextEdit_Rule7.setLayout(form_lbx)
        self.Results.MSSQL_R7.connect(lambda: self.MSSQL_Rule7())
        form_lbx.addWidget(self.te9)

    def MSSQL_Rule7(self):
        self.te9.insertPlainText(str(MSSQL_R7_state).replace("[", "").replace("]", "").replace("'", "").replace(" ", "") + "\n")

    def MSSQL_Rule8_Alert_widget(self):
        form_lbx = QBoxLayout(QBoxLayout.TopToBottom)
        self.QTextEdit_Rule8.setLayout(form_lbx)
        self.Results.MSSQL_R8.connect(lambda: self.MSSQL_Rule8())
        form_lbx.addWidget(self.te10)

    def MSSQL_Rule8(self):
        self.te10.insertPlainText(str(MSSQL_R8_state).replace("[", "").replace("]", "").replace("'", "").replace(" ", "") + "\n")

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        # self.Quit.setText(_translate("MainWindow", "Quit"))

import myres


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())